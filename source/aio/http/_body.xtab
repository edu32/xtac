/*define NO_BODY_TYPE         0i8
define FORM_BODY_TYPE       1i8
define MULTIPART_BODY_TYPE  2i8
define OTHER_BODY_TYPE      3i8*/

enum BodyType {
  None,
  Form,
  MultiPart,
  Other
}

//-----------------------------------------------------------------------------------------------------
struct Info {
  readonly boundary = ""
  readonly length = -1i64
  readonly isChunked = false
  readonly type = BodyType.None // NO_BODY_TYPE

  fn initialize(this, headers) {
    import _header

    if const transferEncoding = headers.transferEncoding() {
      assert with "chunked"
      if *transferEncoding == "chunked" {
        this.isChunked = true
        assert with "chunked transfer-encoding"
      }
      return STATUS_UNSUPPORTED_MEDIA_TYPE
    } 

    else if const contentLength = headers.contentLength() {
      const (n, nok) = contentLength.tryParseInt()
      if n >= 0 && nok {
        this.length = n        
      } else {
        return STATUS_BAD_REQUEST
      }
    }

    if const contentType = headers.contentType() {
      each nv in _header.values(contentType) {
        if nv.value == "application/x-www-form-urlencoded" {
          if this.type == BodyType.None {
            this.type = BodyType.Form
          } else {
            return STATUS_BAD_REQUEST
          }
        } 

        else if nv.value == "multipart/form-data" {
          if this.type == BodyType.None {
            this.type = BodyType.MultiPart
            each param in _header.params(nv.params) {
              if param.name == "boundary" {
                if this.boundary.isEmpty() {
                  this.boundary = param.value
                } else {
                  return STATUS_BAD_REQUEST
                }
              }
            }
          } else {
            return STATUS_BAD_REQUEST
          }
        }
      }
    }

    return STATUS_OK
  }
}

async fn text(body) {
  return if !body.ok()
  assert 0
}

async fn form(message, stream) {
  struct Field {
    auto name = String{}
    auto value = String{}
    fn dispose(this) {
      delete this.name
      delete this.value
    }
    fn clear(this) {
      this.name.clear()
      this.value.clear()
    }
    fn format(this, stream, fmt = "") {
      stream.append(this.name)
      stream.append(" = ")
      stream.append(this.value)
    }
    fn isEmpty(this) = this.name.isEmpty() && this.value.isEmpty()
  }
  fn take(field, state, mark, pos) {
    if mark < pos {
      if state == NAME {
          if !field.name.decodePercentEncoded(mark, pos - mark) {
            return STATUS_BAD_REQUEST
          }
      } else if !field.value.decodePercentEncoded(mark, pos - mark) {
        return STATUS_BAD_REQUEST
      }
    }
    return STATUS_OK
  }
  define NAME  1
  define VALUE 2
  const buffer = stream.buffer
  auto field = Field{}
  var state = NAME
  const info = Info{}
  var status = info.initialize(message.headers)
  if status != STATUS_OK {
    message.setParseStatus(status)
    return
  }
  assert info.type == BodyType.Form with nameof(info.type)
  auto body = chunks(stream, info)
  await each chunk, chunkStatus in body {
    status = chunkStatus
    break if status != STATUS_OK
    break if chunk.isEmpty() // End of message.
    const end = chunk.end()
    var mark = chunk.text
    var pos = chunk.text
    for ; pos < end; ++pos {
      if *pos == '%' {
        continue if pos + 2 < end // Continue if we can read '%hh'
        break
      }
      if *pos == '=' {
        continue if state == VALUE
        status = take(field, state, mark, pos)
        break if status != STATUS_OK
        state = VALUE
        mark = pos + 1
      } else if *pos == '&' {
        status = take(field, state, mark, pos)
        break if status != STATUS_OK
        state = NAME
        mark = pos + 1
        if !field.isEmpty() {
          yield field
          field.clear()
        }
      }
    }
    break if status != STATUS_OK
    status = take(field, state, mark, pos)
    break if status != STATUS_OK
    chunk.setFromRange(pos, end)
  }
  if !field.isEmpty() {
    yield field
  }
  message.setParseStatus(status)
}

/* Syntax:
    MultiPart ⟶ ( Part [Part]+ LastPart ) | LastPart
    Part      ⟶ Boundary [Headers] [Content] CRLF
    Boundary  ⟶ '--' <boundary-text> CRLF
    Headers   ⟶ Header [Header]+ CRLF
    Content   ⟶ <binary-content>
*/
async fn multipart(message, stream) {
  struct Field {
    readonly disposition  = String{}
    readonly name         = String{}
    readonly filename     = String{}
    readonly value        = String{}
    readonly headers      = http.Headers{}
    readonly filePath     = String{}
    const    hFile        = os.INVALID_HANDLE_VALUE
    readonly isaFile      = false
    readonly index        = 0
    fn dispose(this) {
      delete this.disposition
      delete this.name
      delete this.filename
      delete this.value
      delete this.headers
      delete this.filePath
      this.closeFile()
    }
    fn reset(this) {
      this.disposition.clear()
      this.name.clear()
      this.filename.clear()
      this.value.clear()
      this.headers.dispose()
      this.filePath.clear()
      this.closeFile()
      this.isaFile = false
      ++this.index
    }
    fn format(this, s, fmt = "") {
      s.append("Content-Disposition: ").append(this.disposition).append("; ")
      s.append("name = \"").append(this.name).append("\"; ")
      s.append("filename = \"").append(this.filename).append("\"\r\n")
      this.headers.format(s)
    }
    fn setNameValue(this, name, value) {
      if name == "Content-Disposition" {
        this.disposition.clear().append(value)
      }

      else if name == "name" {
        this.name.clear().append(value)
      }

      else if name == "filename" {
        this.filename.clear().append(value)
        this.isaFile = true
      }

      else {
        assert with "#{name} = #{value}"
      }

      return STATUS_OK
    }
    fn isEmpty(this) = this.disposition.isEmpty() && this.name.isEmpty() && this.filename.isEmpty() &&
                       this.headers.list.isEmpty() && this.value.isEmpty()
    fn openFile(this, folder) {
      import math
      assert this.isaFile && this.filePath.isEmpty() && this.hFile == os.INVALID_HANDLE_VALUE
      const text = Char[ 0x8 ]
      const random = math.randomstring(&text[0], text.length)
      this.filePath.append(folder).append("\\").append(random).append("-").append(this.filename)
      this.hFile = os.CreateFileA(this.filePath.text, os.GENERIC_WRITE, 0, null, os.CREATE_NEW, 
                                  os.FILE_ATTRIBUTE_NORMAL, null)
      assert this.hFile != os.INVALID_HANDLE_VALUE with "os.CreateFileA failed with #{os.GetLastError()}"
      return this.hFile != os.INVALID_HANDLE_VALUE
    }
    fn closeFile(this) {
      if this.hFile != os.INVALID_HANDLE_VALUE {
        assert os.CloseHandle(this.hFile)
        this.hFile = os.INVALID_HANDLE_VALUE
      }
    }
    fn appendHeader(this, name, value, downloadsFolder) {
      this.headers.append(name, value)
      if name == "Content-Disposition" {
        import _header
        each param in _header.params(value) {
          const n = param.name
          const v = param.value.unquote()
          if n.compare("name", false) == 0 {
            this.name.clear().append(v)
          } else if n.compare("filename", false) == 0 {
            if this.isaFile {
              this.closeFile()
              this.filePath.clear()
            }
            this.filename.clear().append(v)
            this.isaFile = true
            if !this.openFile(downloadsFolder) {
              return STATUS_INTERNAL_SERVER_ERROR
            }
          }
        }
      }
      return STATUS_OK
    }
    fn take(this, pos, end) {
      if this.isaFile {
        assert this.hFile != os.INVALID_HANDLE_VALUE
        return STATUS_OK if pos == end
        assert pos < end
        const bytes = 0
        const ok = os.WriteFile(this.hFile, pos, end - pos, &bytes, null)
        assert ok with "os.WriteFile failed with #{os.GetLastError()}"
        if ok {
          return STATUS_OK
        }
        return STATUS_INTERNAL_SERVER_ERROR
      }
      assert this.hFile == os.INVALID_HANDLE_VALUE
      return STATUS_OK if pos == end
      assert pos < end
      this.value.appendRange(pos, end)
      assert this.value.length < 0x1000
      return STATUS_OK
    }
  }

  define STATE_BOUNDARY  1
  define STATE_HEADERS   2

  const buffer    = stream.buffer
  auto  field     = Field{}
  var   state     = STATE_BOUNDARY
  const info      = Info{}
  var   status    = info.initialize(message.headers)
  var   finished  = false

  if status != STATUS_OK {
    message.setParseStatus(status)
    return
  }

  assert info.type == BodyType.MultiPart && info.boundary.length

  auto boundary = String{}
  boundary.append("--").append(info.boundary)
  auto body = chunks(stream, info)  

  await each chunk, chunkStatus in body {
    status = chunkStatus
    break if status != STATUS_OK
    break if chunk.isEmpty() // End of message.

    for status != STATUS_MORE_DATA {
      if state == STATE_BOUNDARY {
        (status, finished) = skipToBoundary(field, chunk, boundary)
        assert status == STATUS_OK || status == STATUS_MORE_DATA
        break if status != STATUS_OK
        field.closeFile()
        yield &field if !field.isEmpty()
        break if finished
        field.reset()
        state = STATE_HEADERS
      }

      if state == STATE_HEADERS { 
        status = doHeaders(field, chunk, message.folders.downloads)
        break if status != STATUS_OK
        state = STATE_BOUNDARY
      }
    }
    continue if status == STATUS_MORE_DATA
    break    if status != STATUS_OK
  }

  if !finished {
    assert status != STATUS_OK
  }
  message.setParseStatus(status)

  fn skipToBoundary(field, chunk, boundary) {
    const end     = chunk.end()
    const mark    = chunk.text
    var   pos     = mark

    if !field.index {
      for {
        break if pos + boundary.length > end
        const s = string.fromRange(pos, pos + boundary.length)
        return (STATUS_BAD_REQUEST, false) if s != boundary
        var tmp = pos + boundary.length
        break if tmp + 2 > end
        if *tmp == '\r' && tmp[1] == '\n' {
          pos += boundary.length + 2
          chunk.setFromRange(pos, end)
          return (STATUS_OK, false)
        }
        if *tmp == '-' && tmp[1] == '-' {
          tmp += 2
          break if tmp + 2 > end
          if *tmp == '\r' && tmp[1] == '\n' {
            pos += boundary.length + 4
            chunk.setFromRange(pos, end)
            return (STATUS_OK, true)
          }
        }
        return (STATUS_BAD_REQUEST, false)
      }
    }

    else for ; pos + 3 < end; ++pos {
      if *pos == '\r' && pos[1] == '\n' && pos[2] == '-' && pos[3] == '-' {
        break if pos + boundary.length > end
        const s = string.fromRange(pos + 2, pos + 2 + boundary.length)
        if s == boundary {
          var tmp = pos + 2 + boundary.length
          break if tmp + 2 > end
          if *tmp == '\r' && tmp[1] == '\n' {
            const status = field.take(mark, pos)
            return (status, false) if status != STATUS_OK
            pos += 2 + boundary.length + 2
            chunk.setFromRange(pos, end)
            return (STATUS_OK, false)
          }
          if *tmp == '-' && tmp[1] == '-' {
            tmp += 2
            break if tmp + 2 > end
            if *tmp == '\r' && tmp[1] == '\n' {
              const status = field.take(mark, pos)
              return (status, false) if status != STATUS_OK
              pos += 2 + boundary.length + 4
              chunk.setFromRange(pos, end)
              return (STATUS_OK, true)
            }
          }
          return (STATUS_BAD_REQUEST, false)
        }
      }
    }
    const status = field.take(mark, pos)
    return (status, false) if status != STATUS_OK
    chunk.setFromRange(pos, end)
    return (STATUS_MORE_DATA, false)
  }

  fn doHeaders(field, chunk, downloadsFolder) {
    define MAX_HEADER_NAME_LENGTH    0x200 // 512
    define MAX_HEADER_VALUE_LENGTH   0x800 // 2,048
    const end     = chunk.end()
    var   mark    = chunk.text
    var   pos     = mark

    return STATUS_MORE_DATA if pos + 2 > end
    for {
      if *pos == '\r' {
        break if pos + 2 > end
        return STATUS_BAD_REQUEST if pos[1] != '\n'
        pos += 2
        mark = pos
        chunk.setFromRange(mark, end)
        return STATUS_OK
      }
      for ; pos < end && *pos != ':'; ++pos {}
      if pos == end {
        const length = pos - mark
        return STATUS_BAD_REQUEST if length > MAX_HEADER_NAME_LENGTH
        break
      }
      const vstart = ++pos
      for ; pos < end && *pos != '\r'; ++pos {}
      if pos + 2 > end {
        const length = pos - vstart
        return STATUS_BAD_REQUEST if length > MAX_HEADER_VALUE_LENGTH
        break
      }
      assert pos[1] == '\n'
      return STATUS_BAD_REQUEST if pos[1] != '\n'
      const name = string.fromRange(mark, vstart - 1).trim()
      const value = string.fromRange(vstart, pos).trim()
      const status = field.appendHeader(name, value, downloadsFolder)
      assert status == STATUS_OK
      return status if status != STATUS_OK
      pos += 2
      mark = pos
    }
    chunk.setFromRange(mark, end)
    return STATUS_MORE_DATA
  }
}

async fn drain(headers, stream) {
  const info = Info{}
  info.initialize(headers)
  auto body = chunks(stream, info)
  await each chunk, status in body {
    break if status != STATUS_OK
    break if chunk.isEmpty() // End of message.
    chunk.setFromTextAndLength(chunk.end(), 0)
  }
  assert stream.buffer.isEmpty()
}

//-----------------------------------------------------------------------------------------------------
async fn chunks(stream, body) {
  const buffer = stream.buffer
  var chunk = string.fromBuffer(buffer)

  if body.isChunked {
    assert with "chunked"
  }

  // Quit if no content expected.
  return if body.length == 0

  // Upto {contentLength} bytes expected.
  if body.length > 0 {
    var totalReceived = Int64(buffer.length)
    for totalReceived < body.length {
      //println("totalReceived = #{totalReceived}; buffer.length = #{buffer.length}; body.length = #{body.length}; buffer = #{buffer}")
      if buffer.length {
        chunk = string.fromBuffer(buffer)
        yield (&chunk, STATUS_OK)
        buffer.removeUpto(chunk.text - buffer.text)
      }
      return if totalReceived == body.length
      const (bytesReceived, _) = await stream
      return (&chunk, STATUS_CONNECTION_CLOSED) if !bytesReceived
      totalReceived += bytesReceived
    }
    assert totalReceived == body.length
    chunk = string.fromBuffer(buffer)
    yield (&chunk, STATUS_OK)
    buffer.removeUpto(chunk.text - buffer.text)
    return
  }

  // No content sent.
  return if buffer.isEmpty()

  // Otherwise read upto eof.
  assert 0
}