/*
    Intel manual:
            +―――――――――――――――+―――――――――――――――+
            | ModRM.reg     | ModRM.rm      |
            +―――――――――――――――+―――――――――――――――+
        M → |               | mem           |
        E → |               | reg/mem       |
        G → | reg           |               |
        U → |               | xmm/ymm       |
        V → | xmm/ymm       |               |
        W → |               | xmm/ymm/mem   |
        Y → |               |               | Memory addressed by rdi (e.g. movs, cmps, stos or scas).
        X → |               |               | Memory addressed by rsi (e.g. movs, cmps, stos or scas).
        I → |               |               | Immediate present
        H → |               |               | VEX.vvv present
        J → |               |               | Relative offset from rip present
            +―――――――――――――――+―――――――――――――――+

    Intel manual:
            +―――――――――――――――――――――――――+――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――+
            | Meaning                 | e.g.                                                         |
            +―――――――――――――――――――――――――+――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――+
        w → | 16 bit operand          | Ew - ModRM.rm is 32 bits regardless of operand-size         |
        d → | 32 bit operand          | Vd - ModRM.reg is 32 bits regardless of operand-size         |
        q → | 64 bit operand          | Wq - ModRM.rm is 64 bits regardless of operand-size          |
        v → | 16, 32 or 64 bit operand| Gv - Operand-size determines size of ModRM.reg               |
        x → | 128 or 256 bit operand  | Wx - ModRM.rm is 128 bits for 128 operand-size else 256 bits |
        y → | 32 or 64 bit operand    | Vy - ModRM.reg is 64 bits for 64 operand-size else 32 bits   |
        z → | 16 or 32 bit operand    | Ez - ModRM.rm is 32 bits for 32/64 operand-size else 16 bits |
            +―――――――――――――――――――――――――+――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――+
*/

define   nop 0x90
define   ret 0xC3
define  int3 0xCC
define   cwd 0x99
define   cdq 0x99
define   cqo 0x99
define   lea 0x8D
define pause 0xF390
define   cld 0xFC // Clear DF flag in the EFLAGS register. String operations then increment the rSI/rDI index registers.
define   std 0xFD // Set the DF flag in the EFLAGS register. String operations decrement the rSI/rDI index registers.

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  REX prefix
define  prefix_lock 0xF0
define prefix_repnz 0xF2
define  prefix_repz 0xF3

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define mov_EbGb 0x88 // mov gpr/mem8,        gpr8
define mov_GbEb 0x8A // mov gpr8,            gpr/mem8

define mov_EvGv 0x89 // mov gpr/mem16/32/64, gpr16/32/64
define mov_GvEv 0x8B // mov gpr16/32/64,     gpr/mem16/32/64

define mov_rb_Ib 0xB0 // mov         gpr8, imm8       ; opCode+reg
define mov_rv_Iv 0xB8 // mov  gpr16/32/64, imm16/32   ;  opCode+reg

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define add_EbGb 0x00
define add_GbEb 0x02

define add_EvGv 0x01
define add_GvEv 0x03

define  add_ALIb 0x04
define add_rAXIz 0x05

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define or_EbGb 0x08
define or_GbEb 0x0A

define or_EvGv 0x09
define or_GvEv 0x0B

define  or_ALIb 0x0C
define or_rAXIz 0x0D

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define and_EbGb 0x20
define and_GbEb 0x22

define and_EvGv 0x21
define and_GvEv 0x23

define  and_ALIb 0x24
define and_rAXIz 0x25

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define sub_EbGb 0x28
define sub_GbEb 0x2A

define sub_EvGv 0x29
define sub_GvEv 0x2B

define  sub_ALIb 0x2C
define sub_rAXIz 0x2D

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
define xor_EbGb 0x30
define xor_GbEb 0x32

define xor_EvGv 0x31
define xor_GvEv 0x33

define  xor_ALIb 0x34
define xor_rAXIz 0x35

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  mul
define   imul_GvEv 0xAF //  Two-byte Opcode Map (0Fh prefix)
define imul_GvEvIz 0x69
define imul_GvEvIb 0x6B

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  push
define push_rv 0x50 // _rAXr8 ... _rDIr15
define push_Ib 0x6A // push imm8
define push_Iz 0x68 // push imm16/32

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  pop
define pop_rv 0x58 // _rAXr8 ... _rDIr15

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  call
define call_Jz 0xE8 // call rel16/32

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  xchg
define  xchg_rAX 0x90
define xchg_EbGb 0x86
define xchg_EvGv 0x87

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  cmpxchg
define cmpxchg_EbGb 0xB0
define cmpxchg_EvGv 0xB1

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  cmp
define  cmp_EbGb 0x38
define  cmp_EvGv 0x39
define  cmp_GbEb 0x3A
define  cmp_GvEv 0x3B
define  cmp_ALIb 0x3C
define cmp_rAXIz 0x3D

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  jmp
define jmp_Jb 0xEB // jmp rel8
define jmp_Jz 0xE9 // jmp rel32

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  jcc
define   jo_cb 0x70 // jo rel8
define  jno_cb 0x71 // jno rel8
define   jb_cb 0x72 // jb rel8
define  jnb_cb 0x73 // jnb rel8
define   jz_cb 0x74 // jz rel8
define  jnz_cb 0x75 // jnz rel8
define  jbe_cb 0x76 // jbe rel8
define jnbe_cb 0x77 // jnbe rel8

define   js_cb 0x78 // js rel8
define  jns_cb 0x79 // jns rel8
define   jp_cb 0x7A // jp rel8
define  jnp_cb 0x7B // jnp rel8
define   jl_cb 0x7C // jl rel8
define  jnl_cb 0x7D // jnl rel8
define  jle_cb 0x7E // jle rel8
define jnle_cb 0x7F // jnle rel8

define   jo_cd 0x80 // jo rel32
define  jno_cd 0x81 // jno rel32
define   jb_cd 0x82 // jb rel32
define  jnb_cd 0x83 // jnb rel32
define   jz_cd 0x84 // jz rel32
define  jnz_cd 0x85 // jnz rel32
define  jbe_cd 0x86 // jbe rel32
define jnbe_cd 0x87 // jnbe rel32

define   js_cd 0x88 // js rel32
define  jns_cd 0x89 // jns rel32
define   jp_cd 0x8A // jp rel32
define  jnp_cd 0x8B // jnp rel32
define   jl_cd 0x8C // jl rel32
define  jnl_cd 0x8D // jnl rel32
define  jle_cd 0x8E // jle rel32
define jnle_cd 0x8F // jnle rel32

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  setcc
define   seto_Eb 0x90 // seto gpr/mem8
define  setno_Eb 0x91
define   setb_Eb 0x92
define  setnb_Eb 0x93
define   setz_Eb 0x94
define  setnz_Eb 0x95
define  setbe_Eb 0x96
define setnbe_Eb 0x97

define   sets_Eb 0x98
define  setns_Eb 0x99
define   setp_Eb 0x9A
define  setnp_Eb 0x9B
define   setl_Eb 0x9C
define  setnl_Eb 0x9D
define  setle_Eb 0x9E
define setnle_Eb 0x9F

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  movsx/movzx
define movzx_GvEb 0xB6 // 2 B opcode map (first byte is 0Fh)
define movzx_GvEw 0xB7 // 2 B opcode map (first byte is 0Fh)

define movsx_GvEb 0xBE // 2 B opcode map (first byte is 0Fh)
define movsx_GvEw 0xBF // 2 B opcode map (first byte is 0Fh)

define movsxd_GvEv 0x63


//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  movs
define movs_YbXb 0xA4
define movs_YvXv 0xE9

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  stos
define  stos_YbAl 0xAA
define stos_YvrAX 0xAB

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  xadd
define xadd_EbGb 0xC0
define xadd_EvGv 0xC1

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  Primary OpCode map extensions
define group1_EbIb   0x80
define group1_EvIz   0x81
define group1_EvIb   0x83
define group1_8FEv   0x8F
  define  group1_pop 0x0
  define  group1_add 0x0
  define   group1_or 0x1
  define  group1_adc 0x2
  define  group1_sbb 0x3
  define  group1_and 0x4
  define  group1_sub 0x5
  define  group1_xor 0x6
  define  group1_cmp 0x7

define group2_EbIb   0xC0
define group2_EvIb   0xC1
define  group2_Eb1   0xD0
define  group2_Ev1   0xD1
define group2_EbCL   0xD2
define group2_EvCL   0xD3
  define  group2_rol 0x0
  define  group2_ror 0x1
  define  group2_rcl 0x2
  define  group2_rcr 0x3
  define  group2_shl 0x4
  define  group2_shr 0x5
  define  group2_sar 0x7

define group3_EbIb   0xF6
define   group3_Eb   0xF6
define group3_EvIz   0xF7
define   group3_Ev   0xF7
  define group3_test 0x0
  define  group3_not 0x2
  define  group3_neg 0x3
  define  group3_mul 0x4
  define group3_imul 0x5
  define  group3_div 0x6
  define group3_idiv 0x7

define   group4_Eb   0xFE
define   group4_Ev   0xFF
  define  group4_inc 0x0
  define  group4_dec 0x1

define   group5_Ev   0xFF
  define  group5_inc 0x0
  define  group5_dec 0x1
  define group5_call 0x2
  define  group5_jmp 0x4
  define group5_push 0x6

define group11_EbIb   0xC6
define group11_EvIz   0xC7
  define  group11_mov 0x0


//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  AVX data transfer instructions (vmov).
//  vmov
define  vmovups_VpsWps 0x10 // vmovups     xmm128, xmm/mem128
define  vmovups_WpsVps 0x11 // vmovups xmm/mem128, xmm128

define  vmovupd_VpdWpd 0x10 // vmovupd     xmm128, xmm/mem128
define  vmovupd_WpdVpd 0x11 // vmovupd xmm/mem128, xmm128

define  vmovss_VxHxWss 0x10 // vmovss     xmm32, xmm/mem32
define vmovss_WssHxVss 0x11 // vmovss xmm/mem32, xmm32

define  vmovsd_VxHxWsd 0x10 // vmovsd     xmm64, xmm/mem64
define vmovsd_WsdHxVsd 0x11 // vmovsd xmm/mem64, xmm64

define      vmovd_VyWy 0x6E // vmovd     xmm32, gpr/mem32
define      vmovd_WyVy 0x7E // vmovq gpr/mem32, xmm32

define      vmovq_VyWy 0x6E // vmovq     xmm64, gpr/mem64
define      vmovq_WyVy 0x7E // vmovq gpr/mem64, xmm64

define     vmovdq_VxWx 0x6F // vmovdqu/vmovdqa     xmm128/256, xmm/mem128/256
define     vmovdq_WxVx 0x7F // vmovdqu/vmovdqa xmm/mem128/256, xmm128/256


//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  vand
define vandps_VpsHpsWps 0x54 // vandps    xmm128, xmm/mem128
define vandpd_VpdHpdWpd 0x54 // vandpd    xmm128, xmm/mem128
define     vpand_VxHxWx 0xDB // vpand xmm128/256, xmm128/256, xmm/mem128/256

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  vor
define vorps_VpsHpsWps 0x56 // vorps    xmm128, xmm/mem128
define vorpd_VpdHpdWpd 0x56 // vorpd    xmm128, xmm/mem128
define     vpor_VxHxWx 0xEB // vpor xmm128/256, xmm128/256, xmm/mem128/256

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  vxor
define vxorps_VpsHpsWps 0x57 // vxorps    xmm128, xmm/mem128
define vxorpd_VpdHpdWpd 0x57 // vxorpd    xmm128, xmm/mem128
define     vpxor_VxHxWx 0xEF // vpxor xmm128/256, xmm128/256, xmm/mem128/256

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  add
define vaddss_VssHssWss 0x58
define vaddsd_VsdHsdWsd 0x58
define vaddps_VpsHpsWps 0x58
define vaddpd_VpdHpdWpd 0x58

define vpaddb_VxHxWx 0xFC
define vpaddw_VxHxWx 0xFD
define vpaddd_VxHxWx 0xFE
define vpaddq_VxHxWx 0xD4

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  sub
define vsubss_VssHssWss 0x5C
define vsubsd_VsdHsdWsd 0x5C
define vsubps_VpsHpsWps 0x5C
define vsubpd_VpdHpdWpd 0x5C

define vpsubb_VxHxWx 0xF8
define vpsubw_VxHxWx 0xF9
define vpsubd_VxHxWx 0xFA
define vpsubq_VxHxWx 0xFB

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  mul
define vmulss_VssHssWss 0x59
define vmulsd_VsdHsdWsd 0x59
define vmulps_VpsHpsWps 0x59
define vmulpd_VpdHpdWpd 0x59

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  div
define vdivss_VssHssWss 0x5E
define vdivsd_VsdHsdWsd 0x5E
define vdivps_VpsHpsWps 0x5E
define vdivpd_VpdHpdWpd 0x5E

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  cmp
define vucomiss_VssWss 0x2E
define vucomisd_VsdWsd 0x2E

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  cvt
define vcvtsi2ss_VssHssEy 0x2A
define vcvtsi2sd_VsdHsdEy 0x2A

define vcvtss2si_GyWss 0x2D
define vcvtsd2si_GyWsd 0x2D

define vcvttss2si_GyWss 0x2C
define vcvttsd2si_GyWsd 0x2C

define vcvtss2sd_VsdHxWss 0x5A
define vcvtsd2ss_VssHxWsd 0x5A

//―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
//  VEX prefix/suffix
define prefix_00 0x0
define prefix_66 0x1
define prefix_F3 0x2
define prefix_F2 0x3

define suffix_ps 0x0       //  packed single 
define suffix_pd prefix_66 //  packed double (66h)
define suffix_ss prefix_F3 //  scalar single (F3h)
define suffix_sd prefix_F2 //  scalar double (F2h)

//  VEX vector length
define     no_vector 0
define 128bit_vector 0
define 256bit_vector 1

define      two_bytes_escape 0x1  //    0Fh  Two-byte opcode map
define three_bytes_escape_38 0x2  // 0F 38h  Three-byte opcode map
define three_bytes_escape_3A 0x3  // 0F 3Ah  Three-byte opcode map.

/*
    +――――――+――――――+――――――――+――――――――+――――――――――+――――――――――+
    | size | bits | data   | number | suffix   | type     |
    +――――――+――――――+――――――――+――――――――+――――――――――+――――――――――+
    | 16 B | 128  | Int8   | 16     | i8×16    | Int8x16  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int16  | 8      | i16×8    | Int16x8  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int32  | 4      | i32×4    | Int32x4  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int64  | 2      | i64×2    | Int64x2  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt8  | 16     | u8×16    | UInt8x16 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt16 | 8      | u16×8    | UInt16x8 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt32 | 4      | u32×4    | UInt32x4 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt64 | 2      | u64×2    | UInt64x2 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Float  | 4      | ps       | Floatx4  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Double | 2      | pd       | Doublex2 |
    +――――――+――――――+――――――――+――――――――+――――――――――+――――――――――+
    | 32 B | 256  | Int8   | 32     | i8×32    | Int8x32  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int16  | 16     | i16×16   | Int16x16 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int32  | 8      | i32×8    | Int32x8  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int64  | 4      | i64×4    | Int64x4  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt8  | 32     | u8×32    | UInt8x32 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt16 | 16     | u16×16   | UInt16x16|
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt32 | 8      | u32×8    | UInt32x8 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt64 | 4      | u64×4    | UInt64x4 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Float  | 8      | ps256    | Floatx8  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Double | 4      | pd256    | Doublex4 |
    +――――――+――――――+――――――――+――――――――+――――――――――+――――――――――+
    | 64 B | 512  | Int8   | 64     | i8×64    | Int8x64  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int16  | 32     | i16×32   | Int16x32 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int32  | 16     | i32×16   | Int32x16 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Int64  | 8      | i64×8    | Int64x8  |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt8  | 64     | u8×64    | UInt8x64 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt16 | 32     | u16×32   | UInt16x32|
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt32 | 16     | u32×16   | UInt32x16|
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | UInt64 | 8      | u64×8    | UInt64x8 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Float  | 16     | ps512    | Floatx16 |
    |      |      +――――――――+――――――――+――――――――――+――――――――――+
    |      |      | Double | 8      | pd512    | Doublex8 |
    +――――――+――――――+――――――――+――――――――+――――――――――+――――――――――+

*/