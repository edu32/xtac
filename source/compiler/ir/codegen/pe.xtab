define IMAGE_DOS_SIGNATURE              0x5A4D      // MZ
define IMAGE_SIZEOF_SHORT_NAME          8
define IMAGE_SIZEOF_SECTION_HEADER      40
define IMAGE_NT_SIGNATURE               0x00004550  // PE00
define IMAGE_NT_OPTIONAL_HDR64_MAGIC    0x20b
define IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16


define IMAGE_FILE_MACHINE_AMD64       0x8664      // AMD64 (K8)
define IMAGE_FILE_EXECUTABLE_IMAGE    0x0002      // File is executable  (i.e. no unresolved external references).
define IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020      // App can handle >2gb addresses


define IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA       0x0020  // Image can handle a high entropy 64-bit virtual address space.
define IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE          0x0040  // DLL can move.
define IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY       0x0080  // Code Integrity Image
define IMAGE_DLLCHARACTERISTICS_NX_COMPAT             0x0100  // Image is NX compatible
define IMAGE_DLLCHARACTERISTICS_NO_ISOLATION          0x0200  // Image understands isolation and doesn't want it
define IMAGE_DLLCHARACTERISTICS_NO_SEH                0x0400  // Image does not use SEH.  No SE handler may reside in this image
define IMAGE_DLLCHARACTERISTICS_NO_BIND               0x0800  // Do not bind this image.
define IMAGE_DLLCHARACTERISTICS_APPCONTAINER          0x1000  // Image should execute in an AppContainer
define IMAGE_DLLCHARACTERISTICS_WDM_DRIVER            0x2000  // Driver uses WDM model
define IMAGE_DLLCHARACTERISTICS_GUARD_CF              0x4000  // Image supports Control Flow Guard.
define IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE 0x8000

define IMAGE_SCN_CNT_CODE             0x00000020  // Section contains code.
define IMAGE_SCN_CNT_INITIALIZED_DATA 0x00000040  // Section contains initialized data.
define IMAGE_SCN_MEM_EXECUTE          0x20000000  // Section is executable.
define IMAGE_SCN_MEM_READ             0x40000000  // Section is readable.
define IMAGE_SCN_MEM_WRITE            0x80000000  // Section is writeable.

define IMAGE_SUBSYSTEM_UNKNOWN                  0   // Unknown subsystem.
define IMAGE_SUBSYSTEM_NATIVE                   1   // Image doesn't require a subsystem.
define IMAGE_SUBSYSTEM_WINDOWS_GUI              2   // Image runs in the Windows GUI subsystem.
define IMAGE_SUBSYSTEM_WINDOWS_CUI              3   // Image runs in the Windows character subsystem.
define IMAGE_SUBSYSTEM_OS2_CUI                  5   // image runs in the OS/2 character subsystem.
define IMAGE_SUBSYSTEM_POSIX_CUI                7   // image runs in the Posix character subsystem.
define IMAGE_SUBSYSTEM_NATIVE_WINDOWS           8   // image is a native Win9x driver.
define IMAGE_SUBSYSTEM_WINDOWS_CE_GUI           9   // Image runs in the Windows CE subsystem.
define IMAGE_SUBSYSTEM_EFI_APPLICATION          10  //
define IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER  11  //
define IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER       12  //
define IMAGE_SUBSYSTEM_EFI_ROM                  13
define IMAGE_SUBSYSTEM_XBOX                     14
define IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION 16
define IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG        17

define IMAGE_DIRECTORY_ENTRY_EXPORT          0   // Export Directory
define IMAGE_DIRECTORY_ENTRY_IMPORT          1   // Import Directory
define IMAGE_DIRECTORY_ENTRY_RESOURCE        2   // Resource Directory
define IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   // Exception Directory
define IMAGE_DIRECTORY_ENTRY_SECURITY        4   // Security Directory
define IMAGE_DIRECTORY_ENTRY_BASERELOC       5   // Base Relocation Table
define IMAGE_DIRECTORY_ENTRY_DEBUG           6   // Debug Directory
//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)
define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   // Architecture Specific Data
define IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   // RVA of GP
define IMAGE_DIRECTORY_ENTRY_TLS             9   // TLS Directory
define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   // Load Configuration Directory
define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   // Bound Import Directory in headers
define IMAGE_DIRECTORY_ENTRY_IAT            12   // Import Address Table
define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   // Delay Load Import Descriptors
define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   // COM Runtime descriptor

define IMAGE_NUMBEROF_SECTIONS  2
define IMAGE_BASE_ADDRESS       0x0000000140000000u64
define IMAGE_SECTION_ALIGNMENT  0x1000
define IMAGE_FILE_ALIGNMNENT    0x200


struct IMAGE_DOS_HEADER {
  var    e_magic = 0u16                 // Magic number
  var     e_cblp = 0u16                 // Bytes on last page of file
  var       e_cp = 0u16                 // Pages in file
  var     e_crlc = 0u16                 // Relocations
  var  e_cparhdr = 0u16                 // Size of header in paragraphs
  var e_minalloc = 0u16                 // Minimum extra paragraphs needed
  var e_maxalloc = 0u16                 // Maximum extra paragraphs needed
  var       e_ss = 0u16                 // Initial (relative) SS value
  var       e_sp = 0u16                 // Initial SP value
  var     e_csum = 0u16                 // Checksum
  var       e_ip = 0u16                 // Initial IP value
  var       e_cs = 0u16                 // Initial (relative) CS value
  var   e_lfarlc = 0u16                 // File address of relocation table
  var     e_ovno = 0u16                 // Overlay number
  var      e_res = UInt16[4]            // Reserved words
  var    e_oemid = 0u16                 // OEM identifier (for e_oeminfo)
  var  e_oeminfo = 0u16                 // OEM information; e_oemid specific
  var     e_res2 = UInt16[10]           // Reserved words
  var   e_lfanew = 0                    // File address of new exe header
}


struct IMAGE_FILE_HEADER {
  var              machine = 0u16
  var     numberOfSections = 0u16
  var        timeDateStamp = 0u32
  var pointerToSymbolTable = 0u32
  var      numberOfSymbols = 0u32
  var sizeOfOptionalHeader = 0u16
  var      characteristics = 0u16
}

struct IMAGE_DATA_DIRECTORY {
  var virtualAddress = 0u32
  var           size = 0u32
}


struct IMAGE_SECTION_HEADER {
  var name = Byte[ IMAGE_SIZEOF_SHORT_NAME ]
  var misc = union {
    var physicalAddress = 0u32
    var     virtualSize = 0u32 
  }
  var       virtualAddress = 0u32
  var        sizeOfRawData = 0u32
  var     pointerToRawData = 0u32
  var pointerToRelocations = 0u32
  var pointerToLineNumbers = 0u32
  var  numberOfRelocations = 0u16
  var  numberOfLineNumbers = 0u16
  var      characteristics = 0u32
}

struct IMAGE_OPTIONAL_HEADER {
  var                       magic = 0u16
  var          majorLinkerVersion = 0u8
  var            minorLinkVersion = 0u8
  var                  sizeOfCode = 0u32
  var       sizeOfInitializedData = 0u32
  var     sizeOfUnInitializedData = 0u32
  var         addressOfEntryPoint = 0u32
  var                  baseOfCode = 0u32
  var                   imageBase = 0u64
  var            sectionAlignment = 0u32
  var               fileAlignment = 0u32
  var majorOperatingSystemVersion = 0u16
  var minorOperatingSystemVersion = 0u16
  var           majorImageVersion = 0u16
  var           minorImageVersion = 0u16
  var       majorSubsystemVersion = 0u16
  var       minorSubsystemVersion = 0u16
  var           win32VersionValue = 0u32
  var                 sizeOfImage = 0u32
  var               sizeOfHeaders = 0u32
  var                    checkSum = 0u32
  var                   subsystem = 0u16
  var          dllCharacteristics = 0u16
  var          sizeOfStackReserve = 0u64
  var           sizeOfStackCommit = 0u64
  var           sizeOfHeapReserve = 0u64
  var            sizeOfHeapCommit = 0u64
  var                 loaderFlags = 0u32
  var         numberOfRvaAndSizes = 0u32
  var                 directories = IMAGE_DATA_DIRECTORY[ IMAGE_NUMBEROF_DIRECTORY_ENTRIES ]
}

struct Header {
  var       dos = IMAGE_DOS_HEADER{}//              ( 64 B @   0)
  var   message = Byte[ 64 ]  // DOS message        ( 64 B @  64)
  var signature = 0u32        // 'PE'               (  4 B @ 128)
  var      file = IMAGE_FILE_HEADER{} //            ( 20 B @ 132)
  var  optional = IMAGE_OPTIONAL_HEADER{}//         (240 B @ 152)
  var      code = IMAGE_SECTION_HEADER{}//          ( 40 B @ 392)
  var      data = IMAGE_SECTION_HEADER{}//          ( 40 B @ 432)
  var     debug = IMAGE_SECTION_HEADER{}//          ( 40 B @ 472)
                                        //          (  0 B @ 512)
}


struct Buffer {
  readonly    bytes = Byte*{}
  readonly   length = 0
  readonly capacity = 0

  fn dispose(this) {
    delete this.bytes
  }

  fn reserve(this, length):this {
    import malloc from memory
    const cap = this.length + length
    return this if cap <= this.capacity
    if !this.capacity {
      this.capacity = length
    } else for this.capacity < cap {
      this.capacity <<= 1
    }
    this.bytes = malloc(this.bytes, this.capacity)
  }

  fn append(this, bytes, length) {
    this.reserve(length)
    if bytes {
      import mcopy from memory
      mcopy(this.bytes + this.length, bytes as Byte*, length)
    }
    this.length += length
  }

  fn appendNullTerminatedString(this, text, length) {
    this.reserve(length + 1)
    if text {
      import mcopy from memory
      mcopy(this.bytes + this.length, text as Byte*, length)
    }
    this.length += length + 1
  }
}


abstract struct Section {
  var buffer = Buffer{}
  var offset = 0

  fn dispose(this) {
    delete this.buffer
  }

  fn align(this, alignment) {
    const     offset = this.offset + this.buffer.length
    if const padding = computePadding(offset, alignment) {
      this.buffer.append(Byte*{}, padding)
      return offset + padding
    }
    return offset
  }

  fn offsetOfFirstByte(this) = this.offset
  fn offsetOfLastByte(this) = this.offset + this.buffer.length

  fn containsOffset(this, value) = value >= this.offsetOfFirstByte() && value < this.offsetOfLastByte()
}


struct CodeSection : Section {
  var entry = 0

  fn alignFunction(this, function) {
    return this.offset + this.buffer.length
  }
}


struct DataSection : Section {
  var sizeOfGlobals = 0

  fn offsetOfLastByteOfGlobals(this) = this.offset + this.sizeOfGlobals
}


struct Image {
  const           header = Header{}
  const             code = CodeSection{}
  const             data = DataSection{}
  readonly timeDateStamp = 0u32

  fn dispose(this) {
    delete this.code
    delete this.data
  }

  fn initialize(this) {
    this.timeDateStamp = time.timeStamp()
  }
}