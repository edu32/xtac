define _DECBUFSIZE 32
define _CVTBUFSIZE 512

fn printAssert(fileNameString, lineNumber, columnNumber, functionString, conditionString, messageString): Void {
  import console
  auto s = String{}
  s.append(fileNameString).
    append("(")
  lineNumber.format(s)
  s.append(":")
  columnNumber.format(s)
  s.append(") «").
    append(functionString).
    append("» assert ").
    append(conditionString).
    append("\r\n\t").
    append(messageString)
  console.writeln(s)
}

fn printAssertMessage(fileNameString, lineNumber, columnNumber, functionString, conditionString, messageString):void {
  //  file-name '(' start-line ':' start-line-col '-' end-line-col ')' 
}

fn escapeHtml(str) {
  return {
    pos = str.text,
    end = str.end(),
    next = fn(self) {
      return ("", /* done = */ true) if self.pos == self.end
      assert self.pos < self.end
      const mark = self.pos
      const ch = *self.pos
      if ch == '&' {
        define MAX_LENGTH_TO_SEMI_COLON 5
        var semiColon = mark
        for semiColon < self.end && *semiColon != ';' && (semiColon - mark <= MAX_LENGTH_TO_SEMI_COLON) {}
        if semiColon < self.end && *semiColon == ';' {
          ++semiColon
          const s = string.fromRange(mark, semiColon)
          self.pos = semiColon
          return (s, /* done = */ false)
        }
        ++self.pos
        return ("&amp;", /* done = */ false)
      } if ch == '<' {
        ++self.pos
        return ("&lt;", /* done = */ false)
      } if ch == '>' {
        ++self.pos
        return ("&gt;", /* done = */ false)
      }
      for ; self.pos < self.end; ++self.pos {
        const ch = *self.pos
        break if ch == '&' || ch == '<' || ch == '>'
      }
      return (string.fromRange(mark, self.pos), /* done = */ false)
    }
  }
}

fn escapeCss(str) {
  return {
    pos = str.text,
    end = str.end(),
    next = fn(self) {
      return ("", /* done = */ true) if self.calls
      ++self.calls
      return (string.fromRange(self.pos, self.end), /* done = */ false)
    },
    calls = 0
  }
}

fn escapeSql(str) {
  return {
    pos = str.text,
    end = str.end(),
    next = fn(self) {
      return ("", /* done = */ true) if self.pos == self.end
      assert self.pos < self.end
      const mark = self.pos
      const ch = *self.pos
      if ch == '\'' {
        ++self.pos
        return ("''", /* done = */ false)
      } if ch == '"' {
        ++self.pos
        return ('""', /* done = */ false)
      }
      for ; self.pos < self.end; ++self.pos {
        const ch = *self.pos
        break if ch == '\'' || ch == '"'
      }
      return (string.fromRange(mark, self.pos), /* done = */ false)
    }
  }
}

fn escapeJson(str) {
  return {
    pos = str.text,
    end = str.end(),
    next = fn(self) {
      return ("", /* done = */ true) if self.calls
      ++self.calls
      return (string.fromRange(self.pos, self.end), /* done = */ false)
    },
    calls = 0
  }
}

struct builtins {
  var b = 0

  enum Direction { None = 0i8, Left, Right }

  struct Options {
    var        grouper = ""
    var         filler = ""
    var         colors = ""
    var       decimals = 6
    var          radix = 10
    var         groups = 0
    var      leftWidth = 0
    var     rightWidth = 0
    var      groupFrom = Direction.Left
    var     radixWidth = 0i8
    var    formatBytes = false
    var        usegcvt = false
    var      radixChar = ''
    var putRadixPrefix = false
  }

  fn parseOptions(fmt, numberTypeSize = 0): Options {
    /*
      '%'--+--'g'--+--'cvt'                                   use _gcvt_s instead of _fcvt_s
           |       |
           |       +--+----------+--+----------+              group digits in {number} with {quoted} as
           |          |          |  |          |              as a separator
           |          +--quoted--+  +--number--+
           |
           +--'d'--number                                     use {number} decimal places
           |
           +--'y'--+----------+                               format number as disk size with {number}
           |       |          |                               or 2 precision (if {number} is not specified)
           |       +--number--+
           |
           +--','--+----------+                               group digits in groups of {number} or 3
           |       |          |                               and ',' as a filler
           |       +--number--+
           |
           +--'w'--+-------+--number--+----------+            make the number fill {number} characters 
           |       |       |          |          |            from the {l}eft or {r}ight with {quoted}
           |       +--'l'--+          +--quoted--+            as the filler
           |       |       |
           |       +--'r'--+
           |
           +--+-------+--+--+--'x'--+--+--+----------+        Format number as he{x|X}adecimal, {b|B}inary
           |  |       |  |  |       |  |  |          |        or {o}ctal. Optionally prepend the {0}
           |  +--'0'--+  |  +--'X'--+  |  |          |        radix prefix. Ensure that the length is at
           |             |             |  |          |        least {number} digits.
           |             +--+--'b'--+--+  +--number--+
           |             |  |       |  |
           |             |  +--'B'--+  |
           |             |             |
           |             +--+--'o'--+--+
           |             |  |       |  |
           |             |  +--'O'--+  |
           |             +-------------+
           |
           |--'<'--+----------+-------+--+--forecolor--+--'>'  backcolor '|' forecolor
           |       |          |       |  |             |
           |       |          +--'|'--+  |             |
           |       +--backcolor--'|'-----+-------------+
           |
    */
    var   pos = fmt.text
    const end = fmt.end()
    const   o = Options{}
    for pos < end {
      continue if *pos++ != '%'
      break if pos == end
      // Now past '%'
      if *pos == 'g' {
        if pos + 3 < end && pos[1] == 'c' && pos[2] == 'v' && pos[3] == 't' {
          o.usegcvt = true
          pos += 4
        } else {
          ++pos
        }
      } else if *pos == 'd' {
        ++pos
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if nok {
          if n >= 0 {
            o.decimals = n
          }
        }
      } else if *pos == 'y' {
        ++pos
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if nok {
          if n >= 0 {
            o.decimals = n
          }
        } else {
          o.decimals = 2
        }
        o.formatBytes = true
      } else if *pos == ',' {
        ++pos
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if nok {
          if n >= 0 {
            o.groups = n
          }
        } else {
          o.groups = 3
        }
        o.grouper = ","
      } else if *pos == 'w' {
        ++pos
        break if pos == end
        var isRightWidth = true
        switch *pos++ {
          case 'l' isRightWidth = false
          case 'r' isRightWidth = true
          default --pos
        }
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if nok && n >= 0 {
          if isRightWidth {
            o.rightWidth = n
          } else {
            o.leftWidth = n
          }
          const (filler, pos3) = parseQuoted(pos, end)
          pos = pos3
          o.filler = filler
        }
      } else if *pos == '0' {
        break if ++pos == end
        o.putRadixPrefix = true
        var hasRadixWidth = false
        switch const c = *pos++ {
          case 'x', 'X' { 
            o.radix = 16
            o.radixChar = c
            if pos < end && *pos == 'n' {
              switch numberTypeSize {
                case 1 o.radixWidth = 2
                case 2 o.radixWidth = 4
                case 4 o.radixWidth = 8
                case 8 o.radixWidth = 16
              }
              ++pos
              hasRadixWidth = true
            }
          }
          case 'b', 'B' {
            o.radix = 2 
            o.radixChar = c
            if pos < end && *pos == 'n' {
              switch numberTypeSize {
                case 1 o.radixWidth = 8
                case 2 o.radixWidth = 16
                case 4 o.radixWidth = 32
                case 8 o.radixWidth = 64
              }
              ++pos
              hasRadixWidth = true
            }
          }
          case 'o', 'O' {
            o.radix = 8 
            o.radixChar = c
            if pos < end && *pos == 'n' {
              switch numberTypeSize {
                case 1 o.radixWidth = 3
                case 2 o.radixWidth = 6
                case 4 o.radixWidth = 11
                case 8 o.radixWidth = 22
              }
              ++pos
              hasRadixWidth = true
            }
          }
          default o.putRadixPrefix = false
        }
        if !hasRadixWidth {
          const (n, nok, pos2) = parseNumber(pos, end)
          pos = pos2
          if nok {
            o.radixWidth = n
          }
        }
      } else if *pos == 'x' || *pos == 'X' {
        o.radixChar = *pos++
        o.radix = 16
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if n >= 0 && nok {
          o.leftWidth = n
        }
      } else if *pos == 'b' || *pos == 'B' {
        o.radixChar = *pos++
        o.radix = 2
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if n >= 0 && nok {
          o.leftWidth = n
        }
      } else if *pos == 'o' || *pos == 'O' {
        o.radixChar = *pos++
        o.radix = 8
        const (n, nok, pos2) = parseNumber(pos, end)
        pos = pos2
        if n >= 0 && nok {
          o.leftWidth = n
        }
      } else if *pos == '<' {
        const mark = pos
        for ++pos; pos < end && *pos != '>'; ++pos {}
        break if pos == end
        o.colors.setFromRange(mark + 1, pos++)
      }
    }
    assert pos == end
    return o
    fn parseNumber(pos, end) {
      const mark = pos
      for pos; pos < end && char.isaDigit(*pos); ++pos {}
      return (0, false, pos) if pos == mark
      if pos == end || *pos == '%' || *pos == '"' || *pos == '\'' {
        const str = string.fromRange(mark, pos)
        const (n, nok) = str.tryParseInt()
        if n < 0 || n > 0xFF {
          return (0, false, pos)
        }
        return (n, nok, pos)
      }
      return (0, false, pos)
    }
    fn parseQuoted(pos, end) {
      const mark = pos
      const quote = *pos
      return ("", mark) if quote != '\'' && quote != '"'
      for ++pos; pos < end && *pos != quote; ++pos {}
      return ("", mark) if pos == end
      const s = string{ text = mark + 1, length = (pos - mark) - 1}
      return (s, ++pos)
    }
  }

  fn formatChar(this, stream, fmt = ""): Void {
    const   opts = parseOptions(fmt)
    const numbuf = [ this ]
    const    str = string{ text = &numbuf[0], length = numbuf.length }
    applyOptions(str, stream, opts)
  }

  fn formatBool(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt)
    if this {
      applyOptions("true", stream, opts)
    } else {
      applyOptions("false", stream, opts)
    }
  }

  fn formatInt8(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 1)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = Int32(Int8(this))
    os._set_errno(0)
    assert !os._itoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatUInt8(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 1)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = UInt32(UInt8(this))
    os._set_errno(0)
    assert !os._ultoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatInt16(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 2)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = Int32(Int16(this))
    os._set_errno(0)
    assert !os._itoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatUInt16(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 2)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = UInt32(UInt16(this))
    os._set_errno(0)
    assert !os._ultoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatInt32(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 4)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = Int32(this)
    os._set_errno(0)
    assert !os._itoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatUInt32(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 4)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = UInt32(this)
    os._set_errno(0)
    assert !os._ultoa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatInt64(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 8)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = Int64(this)
    os._set_errno(0)
    assert !os._i64toa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatUInt64(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt, numberTypeSize = 8)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf = Char[ _DECBUFSIZE ]
    const n      = UInt64(this)
    os._set_errno(0)
    assert !os._ui64toa_s(n, numbuf, _DECBUFSIZE, opts.radix)
    const str = string{ text = &numbuf[0], length = os.strlen(numbuf) }
    applyOptions(str, stream, opts)
  }

  fn formatFloat(this, stream, fmt = ""): Void {
    return formatDouble(Double(this), stream, fmt)
  }

  fn formatDouble(this, stream, fmt = ""): Void {
    const opts = parseOptions(fmt)
    if opts.formatBytes {
      return formatBytes(this, stream, opts)
    }
    const numbuf  = Char[ _CVTBUFSIZE ]
    const n       = Double(this)
    var dot       = 0
    if opts.usegcvt {
      os._set_errno(0)
      const errno = os._gcvt_s(numbuf, _CVTBUFSIZE, n, opts.decimals)
      assert !errno with "os._gcvt_s failed with #{errno}"
      var len = os.strlen(numbuf)
      if len == 0 {
        numbuf[0] = '0'
        numbuf[1] = '.'
        numbuf[2] = '0'
        dot = 1
        len = 3
      } else if numbuf[0] == '.' {
        assert 0
      } else if numbuf[len - 1] == '.' {
        dot = len - 1
        numbuf[len++] = '0'
      } else {
        for ; dot < len && numbuf[dot] != '.'; ++dot {}
        if dot == len {
          numbuf[len++] = '.'
          numbuf[len++] = '0'
        }
      }
      const str = string{ text = &numbuf[0], length = len }
      applyOptions(str, stream, opts, dot)
      return
    }
    fcvt(this, stream, opts)
  }


  fn fcvt(this, stream, opts): void {
    const numbuf  = Char[ _CVTBUFSIZE ]
    const n       = Double(this) 
    var   dot     = 0, sign = 0
    os._set_errno(0)
    const errno   = os._fcvt_s(numbuf, numbuf.length, n, opts.decimals, &dot, &sign)
    assert !errno with "os._fcvt_s failed with #{errno}"
    var len = os.strlen(numbuf)
    if len == 0 {
      numbuf[len++] = '0'
      numbuf[len++] = '.'
      numbuf[len++] = '0'
      dot = 1
    } else if dot <= 0 {
      const dotPos = -dot
      os.memmove(&numbuf[0] + dotPos + 2, &numbuf[0], len)
      numbuf[0] = '0'
      numbuf[1] = '.'
      var ibuf = 2, idot = 0
      for idot < dotPos {
        numbuf[ibuf] = '0'
        ++ibuf
        ++idot
      }
      len += dotPos + 2
      dot = dotPos + 1
    } else if dot == len {
      numbuf[len++] = '.'
      numbuf[len++] = '0'
    } else {
      os.memmove(&numbuf[0] + dot + 1, &numbuf[0] + dot, len)
      numbuf[dot] = '.'
      ++len
    } if sign {
      os.memmove(&numbuf[0] + 1, &numbuf, len)
      numbuf[0] = '-'
      ++dot
      ++len
    }
    /*if len == 10 {
      var bytesWritten = 0
      const handle = os.GetStdHandle(os.STD_OUTPUT_HANDLE)
      os.WriteConsoleA(handle, numbuf.text, len, &bytesWritten, null)
      assert
      const decs = len - (dot + 1)
      const decimals = opts.decimals
      numbuf[0] = decs
      numbuf[1] = decimals
    }
    for var decs = len - (dot + 1); decs < opts.decimals; ++decs {
      numbuf[len++] = '0'
    }*/
    /*for var i = len; --i > 0; {
      const ch = numbuf[i]
      if ch == '.' {
        len = i + 2
        break
      }
      if ch != '0' {
        if ch != '.' {
          len = i + 1
        }
        break
      }
    }*/
    const str = string{ text = &numbuf[0], length = len }
    applyOptions(str, stream, opts, dot)
  }


  fn formatBytes(this, stream, opts) {
    if this == 0 {
      stream.append("0 B")
      return
    }
    const n = Double(this)
    const base = math.logb(n, 1024)
    static suffixes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    const floored = math.rounddown(base)
    const pow = math.pow(1024, base - floored)
    fcvt(pow, stream, opts)
    const ifloored = floored as Int32
    //println("floored = #{floored}; ifloored = #{ifloored}")
    if ifloored >= 0 && ifloored < suffixes.length {
      stream.append(" ")
      stream.append(suffixes[ifloored])
    } else {
      stream.append(" ??")
    }
  }


  import console


  fn applyOptions(str, stream, opts, dot = 0): void {   
    if opts.leftWidth || opts.rightWidth {
      import strings
      strings.formatStr(str, stream, opts)
      return
    }
    var colors = console.parseColors(opts.colors)
    auto colorizer = console.colorize(colors.backColor, colors.foreColor)
    if opts.putRadixPrefix {
      switch opts.radixChar {
        case 'x', 'X' stream.append("0x")
        case 'b', 'B' stream.append("0b")
        case 'o', 'O' stream.append("0o")
      }
    }
    if opts.radixChar {
      if char.isUpperCase(opts.radixChar) && (opts.radixChar == 'x' || opts.radixChar == 'X') {
        for var i = 0; i < str.length; ++i {
          str.text[i] = char.toUpperCase(str.text[i])
        }
      }
      if opts.radixWidth {
        var gap = opts.radixWidth - str.length
        if opts.filler.isEmpty()
          opts.filler = "0"
        for --gap >= 0 {
          stream.append(opts.filler)
        }
      }
      stream.append(str)
      return

    }
    if opts.groups && opts.grouper.length {
      if dot <= 0 && str.length > opts.groups {
        const len = str.length
        if opts.groupFrom == Direction.Left {        
          const end = str.end()
          var fst = len % opts.groups
          if !fst {
            fst = opts.groups
          }
          var tmp = string{ text = str.text, length = fst }
          stream.append(tmp)
          for var pos = str.text + fst; pos < end; pos += opts.groups {
            stream.append(opts.grouper)
            tmp.setFromTextAndLength(pos, opts.groups)
            stream.append(tmp)
          }
          return
        }
      } else if dot > 0 && dot > opts.groups {
        if opts.groupFrom == Direction.Left {        
          const dotend = str.text + dot
          var fst = dot % opts.groups
          if !fst {
            fst = opts.groups
          }
          var tmp = string{ text = str.text, length = fst }
          stream.append(tmp)
          var pos = str.text + fst
          for ; pos < dotend; pos += opts.groups {
            stream.append(opts.grouper)
            tmp.setFromTextAndLength(pos, opts.groups)
            stream.append(tmp)
          }
          tmp.setFromRange(pos, str.end())
          stream.append(tmp)
          return
        }
      }
    }
    stream.append(str)
  }
}